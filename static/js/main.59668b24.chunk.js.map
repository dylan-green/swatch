{"version":3,"sources":["components/Input.js","App.js","serviceWorker.js","index.js"],"names":["Input","style","padding","class","this","props","title","display","type","onChange","fontSize","file","React","Component","App","fileSelectHandler","event","setState","URL","createObjectURL","target","files","fileUploadHandler","state","alert","img","Image","src","onload","canvas","document","createElement","ctx","getContext","width","naturalWidth","height","naturalHeight","drawImage","data","getImageData","length","r","g","b","p","i","Math","floor","hex","toString","image","avgHex","avgRGB","className","backgroundImage","onClick","maxWidth","maxHeight","borderRadius","alt","hexVal","rgbVal","ColorDisplay","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAIqBA,G,uLAEjB,OACE,yBAAKC,MAAO,CAAEC,QAAS,SACrB,2BAAOC,MAAM,SACVC,KAAKC,MAAMC,MACZ,2BACEL,MAAO,CAAEM,QAAS,QAClBC,KAAK,OACLC,SAAUL,KAAKC,MAAMI,YAGzB,gCACE,0BAAMR,MAAO,CAAES,SAAU,QAAUN,KAAKC,MAAMM,Y,GAbrBC,IAAMC,YCCnCC,G,kBACJ,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KASRU,kBAAoB,SAAAC,GAClB,EAAKC,SAAS,CACZN,KAAMO,IAAIC,gBAAgBH,EAAMI,OAAOC,MAAM,OAZ9B,EAgBnBC,kBAAoB,WACb,EAAKC,MAAMZ,MACda,MAAM,0BAER,IAAMC,EAAM,IAAIC,MAChBD,EAAIE,IAAM,EAAKJ,MAAMZ,KAErBc,EAAIG,OAAS,WACX,IAAMC,EAASC,SAASC,cAAc,UAChCC,EAAMH,EAAOI,WAAW,MACxBC,EAASL,EAAOK,MAAQT,EAAIU,aAC5BC,EAAUP,EAAOO,OAASX,EAAIY,cAEpCL,EAAIM,UAAUb,EAAK,EAAG,GAUtB,IARA,IAAMc,EAAOP,EAAIQ,aAAa,EAAG,EAAGN,EAAOE,GAAQG,KAC7CE,EAASF,EAAKE,OAEhBC,EAAI,EACNC,EAAI,EACJC,EAAI,EACJC,EAAI,EAEGC,EAAI,EAAGA,EAAIL,EAAQK,GAAK,EAC/BJ,GAAKH,EAAKO,GACVH,GAAKJ,EAAKO,EAAI,GACdF,GAAKL,EAAKO,EAAI,GACdD,IAGFH,EAAIK,KAAKC,MAAMN,EAAIG,GACnBF,EAAII,KAAKC,MAAML,EAAIE,GACnBD,EAAIG,KAAKC,MAAMJ,EAAIC,GAEnB,IAAMI,EAAG,WAAOP,EAAEQ,SAAS,KAAlB,OAAwBP,EAAEO,SAAS,KAAnC,OAAyCN,EAAEM,SAAS,KAC7D,EAAKjC,SAAS,CACZkC,MAAO,EAAK5B,MAAMZ,KAClByC,OAAQH,EACRI,OAAO,OAAD,OAASX,EAAT,YAAcC,EAAd,YAAmBC,EAAnB,SApDV,EAAKrB,MAAQ,CACXZ,KAAM,KACNwC,MAAO,KACPC,OAAQ,KACRC,OAAQ,MANO,E,sEA4DjB,OACE,yBAAKC,UAAU,OACb,4BACEA,UAAU,aACVrD,MAAO,CACLsD,gBAAgB,2BAAD,OAA6BnD,KAAKmB,MAAM6B,OAAxC,cAEjB,iCACE,oFACA,kBAAC,EAAD,CACE9C,MAAM,SACNG,SAAUL,KAAKW,kBACfJ,KAAMP,KAAKmB,MAAMZ,OAEnB,4BAAQ2C,UAAU,SAASE,QAASpD,KAAKkB,mBAAzC,WAIF,6BAASrB,MAAO,CAAEC,QAAS,QACzB,yBACED,MAAO,CACLwD,SAAU,MACVC,UAAW,MACXC,aAAc,OAEhBC,IAAI,GACJjC,IAAKvB,KAAKmB,MAAM4B,SAEnB/C,KAAKmB,MAAM6B,QACV,kBAAC,EAAD,CACES,OAAQzD,KAAKmB,MAAM6B,OACnBU,OAAQ1D,KAAKmB,MAAM8B,e,GA5FfzC,IAAMC,YAqGlBkD,E,iLAEF,OACE,yBAAK9D,MAAO,CAAE+D,UAAW,SACvB,uDAC2B,8BAAO5D,KAAKC,MAAMwD,SAE7C,uDAC2B,8BAAOzD,KAAKC,MAAMyD,c,GAR1BlD,IAAMC,WAelBC,IC7GKmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzC,SAAS0C,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.59668b24.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Input.css';\n\nexport default class Input extends React.Component {\n  render() {\n    return (\n      <div style={{ padding: '.5em' }}>\n        <label class='input'>\n          {this.props.title}\n          <input\n            style={{ display: 'none' }}\n            type='file'\n            onChange={this.props.onChange}\n          />\n        </label>\n        <footer>\n          <cite style={{ fontSize: '8px' }}>{this.props.file}</cite>\n        </footer>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n//import Dropzone from './Dropzone';\nimport Input from './components/Input';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: null,\n      image: null,\n      avgHex: null,\n      avgRGB: null\n    };\n  }\n\n  fileSelectHandler = event => {\n    this.setState({\n      file: URL.createObjectURL(event.target.files[0])\n    });\n  };\n\n  fileUploadHandler = () => {\n    if (!this.state.file) {\n      alert('Please select an image');\n    }\n    const img = new Image();\n    img.src = this.state.file;\n\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const width = (canvas.width = img.naturalWidth);\n      const height = (canvas.height = img.naturalHeight);\n\n      ctx.drawImage(img, 0, 0);\n\n      const data = ctx.getImageData(0, 0, width, height).data;\n      const length = data.length;\n\n      let r = 0,\n        g = 0,\n        b = 0,\n        p = 0;\n\n      for (let i = 0; i < length; i += 4) {\n        r += data[i];\n        g += data[i + 1];\n        b += data[i + 2];\n        p++;\n      }\n\n      r = Math.floor(r / p);\n      g = Math.floor(g / p);\n      b = Math.floor(b / p);\n\n      const hex = `#${r.toString(16)}${g.toString(16)}${b.toString(16)}`;\n      this.setState({\n        image: this.state.file,\n        avgHex: hex,\n        avgRGB: `rgb(${r},${g},${b})`\n      });\n    };\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <header\n          className='App-header'\n          style={{\n            backgroundImage: `radial-gradient(circle, ${this.state.avgHex}, white)`\n          }}>\n          <section>\n            <p>Upload an image to determine the average color value.</p>\n            <Input\n              title='Browse'\n              onChange={this.fileSelectHandler}\n              file={this.state.file}\n            />\n            <button className='button' onClick={this.fileUploadHandler}>\n              Upload\n            </button>\n          </section>\n          <section style={{ padding: '2em' }}>\n            <img\n              style={{\n                maxWidth: '40%',\n                maxHeight: '40%',\n                borderRadius: '50%'\n              }}\n              alt=''\n              src={this.state.image}></img>\n          </section>\n          {this.state.avgHex && (\n            <ColorDisplay\n              hexVal={this.state.avgHex}\n              rgbVal={this.state.avgRGB}\n            />\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nclass ColorDisplay extends React.Component {\n  render() {\n    return (\n      <div style={{ textAlign: 'left' }}>\n        <p>\n          The average hex value is <code>{this.props.hexVal}</code>\n        </p>\n        <p>\n          The average rgb value is <code>{this.props.rgbVal}</code>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}